import assert from 'assert';
import { RC4, RC4Shuffle } from '../src/RC4Shuffle.js';

describe('RC4', () => {
  const testVectors = [
    {
      key: new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05]),
      vectors: {
        0: new Uint8Array([0xb2, 0x39, 0x63, 0x05, 0xf0, 0x3d, 0xc0, 0x27, 0xcc, 0xc3, 0x52, 0x4a, 0x0a, 0x11, 0x18, 0xa8]),
        768: new Uint8Array([0xeb, 0x62, 0x63, 0x8d, 0x4f, 0x0b, 0xa1, 0xfe, 0x9f, 0xca, 0x20, 0xe0, 0x5b, 0xf8, 0xff, 0x2b]),
        1536: new Uint8Array([0xd8, 0x72, 0x9d, 0xb4, 0x18, 0x82, 0x25, 0x9b, 0xee, 0x4f, 0x82, 0x53, 0x25, 0xf5, 0xa1, 0x30]),
        3072: new Uint8Array([0xec, 0x0e, 0x11, 0xc4, 0x79, 0xdc, 0x32, 0x9d, 0xc8, 0xda, 0x79, 0x68, 0xfe, 0x96, 0x56, 0x81]),
        4096: new Uint8Array([0xff, 0x25, 0xb5, 0x89, 0x95, 0x99, 0x67, 0x07, 0xe5, 0x1f, 0xbd, 0xf0, 0x8b, 0x34, 0xd8, 0x75])
      }
    },
    {
      key: new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07]),
      vectors: {
        0: new Uint8Array([0x29, 0x3f, 0x02, 0xd4, 0x7f, 0x37, 0xc9, 0xb6, 0x33, 0xf2, 0xaf, 0x52, 0x85, 0xfe, 0xb4, 0x6b]),
        768: new Uint8Array([0x32, 0x82, 0x8f, 0x91, 0x50, 0x2b, 0x62, 0x91, 0x36, 0x8d, 0xe8, 0x08, 0x1d, 0xe3, 0x6f, 0xc2]),
        1536: new Uint8Array([0x78, 0xb2, 0x72, 0xc9, 0x6e, 0x42, 0xea, 0xb4, 0xc6, 0x0b, 0xd9, 0x14, 0xe3, 0x9d, 0x06, 0xe3]),
        3072: new Uint8Array([0xad, 0x26, 0x58, 0x1c, 0x0c, 0x5b, 0xe4, 0x5f, 0x4c, 0xea, 0x01, 0xdb, 0x2f, 0x38, 0x05, 0xd5]),
        4096: new Uint8Array([0xe7, 0x4b, 0x0b, 0x97, 0x31, 0x22, 0x7f, 0xd3, 0x7c, 0x0e, 0xc0, 0x8a, 0x47, 0xdd, 0xd8, 0xb8])
      }
    },
    {
      key: new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]),
      vectors: {
        0: new Uint8Array([0x97, 0xab, 0x8a, 0x1b, 0xf0, 0xaf, 0xb9, 0x61, 0x32, 0xf2, 0xf6, 0x72, 0x58, 0xda, 0x15, 0xa8]),
        768: new Uint8Array([0x44, 0x17, 0x3a, 0x10, 0x3b, 0x66, 0x16, 0xc5, 0xd5, 0xad, 0x1c, 0xee, 0x40, 0xc8, 0x63, 0xd0]),
        1536: new Uint8Array([0x83, 0x69, 0xe1, 0xa9, 0x65, 0x61, 0x0b, 0xe8, 0x87, 0xfb, 0xd0, 0xc7, 0x91, 0x62, 0xaa, 0xfb]),
        3072: new Uint8Array([0xbc, 0x76, 0x83, 0x20, 0x5d, 0x4f, 0x44, 0x3d, 0xc1, 0xf2, 0x9d, 0xda, 0x33, 0x15, 0xc8, 0x7b]),
        4096: new Uint8Array([0x3f, 0xb4, 0x6e, 0x2c, 0x8f, 0x0f, 0x06, 0x8e, 0xdc, 0xe8, 0xcd, 0xcd, 0x7d, 0xfc, 0x58, 0x62])
      }
    },
    {
      key: new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]),
      vectors: {
        0: new Uint8Array([0xed, 0xe3, 0xb0, 0x46, 0x43, 0xe5, 0x86, 0xcc, 0x90, 0x7d, 0xc2, 0x18, 0x51, 0x70, 0x99, 0x02]),
        768: new Uint8Array([0xe0, 0x67, 0xa7, 0x03, 0x19, 0x31, 0xa2, 0x46, 0xa6, 0xc3, 0x87, 0x5d, 0x2f, 0x67, 0x8a, 0xcb]),
        1536: new Uint8Array([0x8a, 0x0f, 0xed, 0xdb, 0xac, 0x86, 0x5a, 0x09, 0xbc, 0xd1, 0x27, 0xfb, 0x56, 0x2e, 0xd6, 0x0a]),
        3072: new Uint8Array([0x7e, 0x82, 0xcb, 0xab, 0xfc, 0x95, 0x38, 0x1b, 0x08, 0x09, 0x98, 0x44, 0x21, 0x29, 0xc2, 0xf8]),
      }
    }
  ];

  testVectors.forEach(({ key, vectors }) => {
    describe(`Key: ${Array.from(key).map(b => b.toString(16).padStart(2, '0')).join('')}`, () => {
      Object.entries(vectors).forEach(([offset, expected]) => {
        it(`should produce correct keystream at offset ${offset}`, () => {
          const rc4 = new RC4(key);
          rc4.keystream(parseInt(offset)); // Advance to the offset
          const keystream = rc4.keystream(expected.length);
          assert.deepStrictEqual(keystream, expected);
        });
      });
    });
  });
});

describe('RC4Shuffle', () => {
  it('should shuffle and unshuffle a 3x3 matrix correctly with a given key', () => {
    const matrix = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9]
    ];
    const key = RC4.prepare('shufflekey');
    const rc4Shuffle = new RC4Shuffle();
    const shuffled = rc4Shuffle.shuffle(matrix, key);
    const unshuffled = rc4Shuffle.unshuffle(shuffled, key);
    assert.deepStrictEqual(unshuffled, matrix);
  });

  it('should shuffle and unshuffle a 2x2 matrix correctly with a different key', () => {
    const matrix = [
      [1, 2],
      [3, 4]
    ];
    const key = RC4.prepare('anotherkey');
    const rc4Shuffle = new RC4Shuffle();
    const shuffled = rc4Shuffle.shuffle(matrix, key);
    const unshuffled = rc4Shuffle.unshuffle(shuffled, key);
    assert.deepStrictEqual(unshuffled, matrix);
  });

  it('should shuffle and unshuffle a 1x5 matrix correctly with a given key', () => {
    const matrix = [
      [1, 2, 3, 4, 5]
    ];
    const key = RC4.prepare('yetanotherkey');
    const rc4Shuffle = new RC4Shuffle();
    const shuffled = rc4Shuffle.shuffle(matrix, key);
    const unshuffled = rc4Shuffle.unshuffle(shuffled, key);
    assert.deepStrictEqual(unshuffled, matrix);
  });

  it('should handle empty matrices correctly', () => {
    const matrix = [];
    const key = RC4.prepare('emptykey');
    const rc4Shuffle = new RC4Shuffle();
    const shuffled = rc4Shuffle.shuffle(matrix, key);
    const unshuffled = rc4Shuffle.unshuffle(shuffled, key);
    assert.deepStrictEqual(unshuffled, matrix);
  });

  it('should handle matrices with one element correctly', () => {
    const matrix = [
      [42]
    ];
    const key = RC4.prepare('singlekey');
    const rc4Shuffle = new RC4Shuffle();
    const shuffled = rc4Shuffle.shuffle(matrix, key);
    const unshuffled = rc4Shuffle.unshuffle(shuffled, key);
    assert.deepStrictEqual(unshuffled, matrix);
  });

  it('should produce different shuffles with different keys', () => {
    const matrix = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9]
    ];
    const key1 = RC4.prepare('key1');
    const key2 = RC4.prepare('key2');
    const rc4Shuffle = new RC4Shuffle();
    const shuffled1 = rc4Shuffle.shuffle(matrix, key1);
    const shuffled2 = rc4Shuffle.shuffle(matrix, key2);
    assert.notDeepStrictEqual(shuffled1, shuffled2);
  });
});

